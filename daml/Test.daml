module Test where

import Daml.Script

import Main
import DA.Optional (fromSomeNote)
import DA.Date (date)
import DA.Date.Types (Month(..))

data Participants = Participants 
  with
    marketMaker: Party
    gambler: Party

setup : Script (Participants)
setup = script do
-- user_setup_begin
  gambler <- allocatePartyWithHint "Gambler" (PartyIdHint "Gambler")
  marketMaker <- allocatePartyWithHint "MarketMaker" (PartyIdHint "MarketMaker")
  gamblerId <- validateUserId "gambler"
  marketMakerId <- validateUserId "marketMaker"
  createUser (User gamblerId (Some gambler)) [CanActAs gambler]
  createUser (User marketMakerId (Some marketMaker)) [CanActAs marketMaker]
-- user_setup_end

  submitMulti [gambler, marketMaker] [] do createCmd MarketMakerGamblerRelationship with ..

  let participants = Participants with ..

  return(participants)

predictionFlowTest: Script()
predictionFlowTest = script do
  Participants{..} <- setup

  marketMakerGamblerRelationshipCid <- 
        fst . fromSomeNote "Relationships are not established" 
            <$> queryContractKey @MarketMakerGamblerRelationship gambler (gambler, marketMaker)

  let 
    pricePrediction = 30000
    startDate       = date 2023 Apr 1 
    endDate         = date 2023 May 1
    maxPrice = 31_000
    minPrice = 26_000
  predictionCid <- submit gambler do exerciseCmd marketMakerGamblerRelationshipCid PredictBitcoinPrice with ..
  fact <- submit marketMaker do exerciseCmd predictionCid FactCheck with ..
  debug "predictionFlowTest finished"